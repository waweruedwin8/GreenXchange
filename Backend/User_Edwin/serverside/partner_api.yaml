openapi: 3.0.3
info:
  title: partner-api
  description: How Blockchain.com Partners can use the Partner-api to modify the bcpay behaviour
  termsOfService: ''
  license:
    name: ''
    url: ''
  version: '0.1'
externalDocs:
  description: Find out more about spec
  url: ''
servers:
  - url: https://api.blockchain.info/partner-gateway/partner-api
    description: ''
tags:
  - name: Quote
    description: ''
    externalDocs:
      description: ''
      url: ''
  - name: Eligibility
    description: ''
    externalDocs:
      description: ''
      url: ''
paths:
  /v1/currencies:
    get:
      summary: 'Get currencies'
      description: Returns an array of all currencies enabled on your account. Contact your account executive to customise your account settings.
      operationId: GetCurrencies
      tags:
        - Eligibility
      security:
        - PublicApiKeyAuth: [ ]
        - PrivateApiKeyAuth: [ ]
      responses:
        '200':
          description: Get the list of fiat and crypto currencies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Currency'
  /v1/regions:
    get:
      summary: 'Get countries and states'
      description: Returns an array of all countries and states supported by BcPay.
      operationId: 'GetRegions'
      tags:
        - Eligibility
      security:
        - PublicApiKeyAuth: [ ]
        - PrivateApiKeyAuth: [ ]
      parameters:
        - name: onlyBuyAllowed
          in: query
          description: If present, only returns countries and states that are allowed to buy.
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Get eligible regions
          content:
            application/json:
              schema:
                type: object
                properties:
                  countries:
                    type: array
                    items:
                      $ref: '#/components/schemas/Country'
                  usStates:
                    type: array
                    items:
                      $ref: '#/components/schemas/UsState'
                required:
                  - countries
                  - usStates
  /v1/payment-methods:
    get:
      summary: 'Get payment methods'
      description: Returns an array of all payment methods enabled on your account. Contact your account executive to customise your account settings.
      operationId: GetPaymentMethods
      tags:
        - Eligibility
      security:
        - PublicApiKeyAuth: [ ]
        - PrivateApiKeyAuth: [ ]
      responses:
        '200':
          description: Get eligible payment methods
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PartnerPaymentMethodResponse'
  /v1/orders:
    get:
      summary: Get orders
      description: |
        Returns either:
        - A list of recent orders, limited to the maximum of 50 orders, sorted by descending creation date.
        - If the `externalReference` query parameter is provided, returns a list of order details for orders that match requested external reference. It could be several orders.
        - If the `walletAddress` query parameter is provided, returns a list of order details for orders that match requested wallet address. It could be several orders.
      operationId: ListOrders
      security:
        - PrivateApiKeyAuth: [ ]
      parameters:
        - name: limit
          in: query
          description: The number of orders to return. Default and maximum is 50. Applicable when `externalReference` query param is not provided.
          schema:
            type: string
          required: false
          example: 10
        - name: offset
          in: query
          description: The number of orders to skip. Use together with `limit` for pagination.
          schema:
            type: integer
          required: false
          example: 20
        - name: externalReference
          in: query
          description: External reference of the order(s), set by partner
          schema:
            type: string
          required: false
          example: external_order_id
        - name: walletAddress
          in: query
          description: User wallet address
          schema:
            type: string
          required: false
          example: bc1q897va9he4zcppqgp3h7ue8hj7448ra0mr6xqtu
        - name: outputCurrency
          description: Currency code of the output currency
          in: query
          required: false
          schema:
            type: string
        - name: from
          description: "The start date of the range of orders to return (inclusive). Format: `YYYY-MM-DD`"
          in: query
          schema:
            type: string
          required: false
          example: '2024-10-01'
        - name: to
          description: "The end date of the range of orders to return (exclusive). Format: `YYYY-MM-DD`"
          in: query
          schema:
            type: string
          required: false
          example: '2024-10-02'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PartnerOrderResponse'
  /v1/orders/{id}:
    get:
      summary: Get order by id
      description: Returns order details for a given order id.
      operationId: GetOrderById
      security:
        - PrivateApiKeyAuth: [ ]
      parameters:
        - in: path
          name: id
          description: Unique identifier of the order
          required: true
          schema:
            type: string
          example: f41a3e45-6392-457c-8566-a282b5f3e177
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartnerOrderResponse'
        '404':
          description: Order not found
  /v1/quote/buy:
    get:
      summary: Get buy quote
      description: |-
        Returns real-time buy quote for a currency pair.
        Supply `quoteCurrencyCode`, `baseCurrencyCode` and `quoteCurrencyAmount`(fiat) to get a detailed buy quote, comprehensive of fees, and the amount of quote currency (fiat) that the user will need to pay for the transaction, as well as base currency (crypto) the user will get after the transaction.
      operationId: GetQuoteBuy
      tags:
        - Quote
      security:
        - PublicApiKeyAuth: [ ]
        - PrivateApiKeyAuth: [ ]
      parameters:
        - name: quoteCurrencyCode
          in: query
          description: The currency to buy with. Must be a fiat currency.
          schema:
            type: string
          required: true
          example: USD
        - name: baseCurrencyCode
          in: query
          description: The currency to buy. Must be crypto.
          schema:
            type: string
          required: true
          example: BTC
        - name: quoteCurrencyAmount
          in: query
          description: A positive decimal representing how much crypto the customer wants to buy. Must be a decimal number with precision not higher then the currency precision.
          schema:
            type: number
          required: true
          example: "100.00"
        - $ref: '#/components/parameters/PaymentMethodParam'
        - name: countryCode
          in: query
          description: e.g. `US`
          example: US
          schema:
            type: string
            minLength: 2
            maxLength: 2
            pattern: Iso3188-1-alpha2
        - name: usStateCode
          in: query
          description: e.g. `AL`. If `country!=US` this parameter is ignored.
          example: AL
          schema:
            type: string
        - name: walletAddress
          in: query
          description: The wallet address where the user wants to receive the crypto.
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  quoteCurrencyAmount:
                    type: string
                    description: The amount of quote currency (fiat) that the user will need to pay for the transaction
                    example: '63.00'
                  quoteCurrencyCode:
                    type: string
                    description: Currency the user is buying with.
                    example: USD
                  quoteCurrency:
                    description: More details about the quote currency
                    allOf:
                      - $ref: '#/components/schemas/Currency'
                    example:
                      - type: FIAT
                        name: US Dollar
                        code: USD
                        precision: 2
                        minBuyAmount: 20.00
                        maxBuyAmount: 1200.00
                  baseCurrencyAmount:
                    type: string
                    description: The amount of base currency (crypto) that will be converted from `quoteCurrencyAmount` using `price`. It does not include fees. See `totalAmount` for the amount of base currency the user will get after the transaction (fees included)
                    example: '0.001'
                  baseCurrencyCode:
                    type: string
                    description: Currency the user is buying.
                    example: BTC
                  baseCurrency:
                    description: More details about the base currency
                    allOf:
                      - $ref: '#/components/schemas/Currency'
                    example:
                      - type: CRYPTO
                        name: Bitcoin
                        code: BTC
                        precision: 8
                        network: BTC
                        supportsDestinationTag: false
                        isSupportedInUS: true
                        allowedUSStates:
                          - AL
                          - CT
                  price:
                    type: string
                    description: The price of the base currency in the quote currency. If the customer is buying BTC with USD, this is the price of BTC in USD
                    example: '62451.29'
                  processingFeeAmount:
                    type: string
                    description: The amount of Blockchain.com processing fees expressed in quote currency. e.g. when buying BTC with USD, this fee is expressed in USD
                    example: '1.00'
                  partnerFeeAmount:
                    type: string
                    description: The amount of partner fees expressed in quote currency. e.g. when buying BTC with USD, this fee is expressed in USD
                    example: '1.00'
                  networkFeeAmount:
                    type: string
                    description: The amount of network (blockchain transaction) fees expressed in quote currency. e.g. when buying BTC with USD, this fee is expressed in USD
                    example: '1.00'
                  totalAmount:
                    type: string
                    description: The actual of the base currency (crypto) the user will get after the transaction, comprehensive of all fees. See `baseCurrencyAmount` for the amount without fees.
                    example: '0.0009'
                  paymentMethod:
                    description: Payment method to be used for the order. Can be null if it was not provided in the request
                    allOf:
                      - $ref: '#/components/schemas/PaymentMethod'
                    example: CARD
                required:
                  - quoteCurrencyAmount
                  - quoteCurrencyCode
                  - quoteCurrency
                  - baseCurrencyAmount
                  - baseCurrencyCode
                  - baseCurrency
                  - price
                  - processingFeeAmount
                  - partnerFee
                  - networkFeeAmount
                  - totalAmount
        # Definition of all error statuses
        default:
          description: |-
            Returns error 400 when:
            1. Any of the required query params are missing
            2. `baseCurrencyCode` / `quoteCurrencyCode` is not supported
            3. `baseCurrencyCode` is not of the type 'Crypto'
            4. `quoteCurrencyCode` is not of the type 'Fiat'
            5. `baseCurrencyCode` is not allowed for trading in this `country`
            6. `baseCurrencyCode` is not allowed for trading in this `usState`
            7. `quoteCurrencyCode` is not allowed for trading in this `country`
            8. `quoteCurrencyCode` is not allowed for trading in this `usState`
            9. `quoteCurrencyCode` is not allowed for any region
            10. `baseCurrencyCode` is not allowed for any region
            Returns error 422 when:
            1. `Fee profile` for partner not found
            2. `Quote` not found for the requested parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/Error'
components:
  schemas:
    Currency:
      type: object
      properties:
        type:
          type: string
          description: Can be `crypto` or `fiat`
          enum:
            - crypto
            - fiat
        name:
          type: string
          description: Name of the currency
          example:
            - US Dollar
            - Bitcoin
        code:
          type: string
          description: The alphabetical code used to identify the currency. The code is an abbreviated version of the currency name that is used to identify the currency. Sometimes referred to as the currency "ticker". Code is case sensitive.
          example:
            - USD
            - BTC
        precision:
          type: number
          description: The number of decimal places supported by the currency. For example, Bitcoin has a precision of 8 decimal places, so the smallest possible unit of Bitcoin is 0.00000001 BTC. For USD, the precision is 2 decimal places, so the smallest possible unit of USD is 0.01 USD.
          example:
            - 2
            - 8
        minBuyAmount:
          type: string
          description: The minimum base currency amount a customer can use to buy crypto. For example, if `minBuyAmount` is `25` under USD fiat currency object, no orders for less than $25 can be placed. This field is only present for fiat currencies.
          example: 20.00
        maxBuyAmount:
          type: string
          description: The maximum base currency amount a customer can use to buy crypto. For example, for `maxBuyAmount` is `1200` under USD fiat currency object, no orders for more than $1200 can be placed. This field is only present for fiat currencies.
          example: 1200.00
        network:
          type: string
          description: The network the currency is on. Can be `BTC`, `ETH` etc. Always `null` for fiat.
          example:
            - BTC
            - ETH
        supportsDestinationTag:
          type: boolean
          description: Whether the currency supports destination tags / memo. This is true for example for XLM and XRP. Always `null` for fiat.
        isSupportedInUS:
          type: boolean
          description: Whether purchases for this currency are supported in the US. Always `null` for fiat
        allowedUSStates:
          type: array
          items:
            type: string
            maxLength: 2
            minLength: 2
            pattern: Iso3166-alpha2
          description: List of US states that are supported for this currency. US states are specified by the last 2 letter of their ISO 3166-2:US code. Always `null` for fiat
          example:
            - AL
            - CT
      required:
        - type
        - name
        - code
        - precision
      example:
        - type: FIAT
          name: US Dollar
          code: USD
          precision: 2
          minBuyAmount: 20.00
          maxBuyAmount: 1200.00
        - type: CRYPTO
          name: Bitcoin
          code: BTC
          precision: 8
          network: BTC
          supportsDestinationTag: false
          isSupportedInUS: true
          allowedUSStates:
            - AL
            - CT
    PartnerPaymentMethodResponse:
      type: object
      properties:
        type:
          type: string
          description: Type of the payment method supported.
          enum:
            - CARD
            - APPLE_PAY
            - GOOGLE_PAY
        supportedCurrencies:
          type: array
          description: List of currencies supported for this payment method. Each Currency is specified by its alphabetical code. The code is an abbreviated version of the currency name, sometimes referred to as the currency "ticker". Code is case sensitive.
          items:
            type: string
      required:
        - type
        - supportedCurrencies
      example:
        - type: CARD
          supportedCurrencies:
            - USD
            - GBP
            - EUR
    PaymentMethod:
      type: string
      description: Payment method to be used for the order. Can be null if it was not provided in the request.
      enum:
        - CARD
        - APPLE_PAY
        - GOOGLE_PAY
      example: CARD
    Quote:
      type: object
      properties:
        quoteId:
          type: string
          description: UUID
        baseCurrencyCode:
          type: string
        baseCurrencyAmount:
          type: string
        quoteCurrencyCode:
          type: string
        quoteCurrencyAmount:
          type: string
        price:
          type: string
        quoteExpiresAt:
          type: string
          description: Timestamp
      required:
        - quoteId
        - baseCurrencyCode
        - baseCurrencyAmount
        - quoteCurrencyCode
        - price
        - quoteCurrencyAmount
        - quoteExpiresAt
    Error:
      type: object
      properties:
        type:
          type: string
          description: type of the error
        message:
          type: string
          description: English message describing the error
      required:
        - type
        - message
      example:
        - type: RequestValidation.BadRequest.MissingParam
          message: "Missing parameter 'quoteCurrencyCode'. Required params: [quoteCurrencyCode, baseCurrencyCode, quoteCurrencyAmount]"
        - type: CurrencyValidation.NotSupported.InCountry
          message: "baseCurrency 'BTC' not supported in country 'NL'"
        - type: CurrencyValidation.NotSupported.InUSState
          message: "baseCurrency 'BCY' not supported in US State 'FL'"
        - type: CurrencyValidation.NotSupported.InAnyRegion
          message: "baseCurrency 'BCY' not supported in any region"
    Country:
      type: object
      properties:
        alpha2:
          type: string
          description: The country's `ISO 3166-1 alpha-2` code.
          minLength: 2
          maxLength: 2
        alpha3:
          type: string
          description: The country's `ISO 3166-1 alpha-3` code.
          minLength: 3
          maxLength: 3
        isBuyAllowed:
          type: string
          description: Whether residents of this country can buy cryptocurrencies.
        name:
          type: string
          description: The country's name in english.
      required:
        - alpha2
        - alpha3
        - isBuyAllowed
        - name
      example:
        - alpha2: BE
          alpha3: BEL
          isBuyAllowed: true
          name: Belgium
        - alpha2: GB
          alpha3: GBR
          isBuyAllowed: true
          name: United Kingdom
        - alpha2: US
          alpha3: USA
          isBuyAllowed: true
          name: United States
    UsState:
      type: object
      properties:
        alpha2:
          type: string
          description: The name of the state in `ISO 3166-2 alpha2` format e.g. `CA`,`FL`, ..
          minLength: 2
          maxLength: 2
          pattern: ''
          example:
            - CA
            - FL
            - WA
        isBuyAllowed:
          type: boolean
          description: True if resident of this state can buy crypto.
        name:
          type: string
          description: the state name in English
      required:
        - alpha2
        - isBuyAllowed
        - name
      example:
        - alpha2: CA
          isBuyAllowed: true
          name: California
        - alpha2: FL
          isBuyAllowed: true
          name: Florida
        - alpha2: WA
          isBuyAllowed: true
          name: Washington
    PartnerOrderResponse:
      type: object
      properties:
        orderId:
          type: string
          description: Unique identifier of the order
          example: f41a3e45-6392-457c-8566-a282b5f3e177
        externalReference:
          type: string
          description: An optional external order reference set by the partner. It is limited to 100 characters.
          example: your_order_id
        subPartnerId:
          type: string
          description: An optional 3rd party reference set by the partner. It is limited to 50 characters.
          example: your_sub_partner_id
        orderType:
          type: string
          enum:
            - BUY
            - SELL
          description: Type of the order. BUY for on-ramp, SELL for off-ramp
          example: BUY
        createdAt:
          type: string
          description: Timestamp of the order creation
          example: '2024-10-01T12:00:00Z'
        orderState:
          type: string
          enum:
            - PENDING
            - WITHDRAWING
            - COMPLETED
            - FAILED
          description: Current state of the order
          example: COMPLETED
        orderStateUpdatedAt:
          type: string
          description: Timestamp of the last order state change
          example: '2024-10-01T13:00:00Z'
        paymentMethod:
          type: string
          enum:
            - CARD
            - APPLE_PAY
            - GOOGLE_PAY
          description: Payment method used for the order
          example: CARD
        inputCurrency:
          type: string
          description: Currency code used for funding the order
          example: USD
        inputAmount:
          type: string
          description: Amount of input currency used for the order
          example: '100.00'
        outputCurrency:
          type: string
          description: Currency code of the output currency
          example: BTC
        outputAmount:
          type: string
          description: Amount of output currency
          example: '0.001'
        amountUsd:
          type: string
          description: Amount of the transaction denominated in USD. Will be an approximate value in case of `inputCurrency` different than USD.
          example: '100.00'
        processingFee:
          type: string
          description: Blockchain.com Pay processing fee denominated in `inputCurrency`
          example: '1.00'
        processingFeeUsd:
          type: string
          description: Blockchain.com Pay processing fee denominated in USD. Will be an approximate value in case of `inputCurrency` different than USD.
          example: '1.00'
        partnerFee:
          type: string
          description: Partner fee denominated in `inputCurrency`
          example: '0.50'
        partnerFeeUsd:
          type: string
          description: Partner fee denominated in USD. Will be an approximate value in case of `inputCurrency` different than USD.
          example: '0.50'
        networkFee:
          type: string
          description: Network fee denominated in `inputCurrency`
          example: '1.50'
        networkFeeUsd:
          type: string
          description: Transaction network fee denominated in USD. Will be an approximate value in case of `inputCurrency` different than USD.
          example: '1.50'
        userId:
          type: string
          description: Unique identifier of the user
          example: 2b6f0cc9-7b0c-4f3b-8f3b-6f0cc97b0c4f
        targetWalletAddress:
          type: string
          description: Target wallet address of the crypto transaction
          example: bc1q897va9he4zcppqgp3h7ue8hj7448ra0mr6xqtu
        transactionHash:
          type: string
          description: Transaction hash of the crypto transaction. Will only be present for orders in COMPLETED state
          example: 4b1549abe58cface17d400bf50ff0fe0c2e2ca8121f4e3764d807dc841a2ab80
      required:
        - orderId
        - orderType
        - createdAt
        - orderState
        - orderStateUpdatedAt
        - paymentMethod
        - inputCurrency
        - inputAmount
        - outputCurrency
        - outputAmount
        - amountUsd
        - processingFee
        - processingFeeUsd
        - partnerFee
        - partnerFeeUsd
        - networkFee
        - networkFeeUsd
        - userId
        - targetWalletAddress
  securitySchemes:
    PublicApiKeyAuth:
      in: header
      name: X-Public-API-Key
      type: apiKey
    PrivateApiKeyAuth:
      in: header
      name: X-Private-API-Key
      type: apiKey
  parameters:
    PaymentMethodParam:
      in: query
      name: paymentMethod
      required: false
      description: Payment method to be used for the order. If not set, the quote will not consider the payment method.
      schema:
        type: string
        enum:
          - CARD
          - APPLE_PAY
          - GOOGLE_PAY
